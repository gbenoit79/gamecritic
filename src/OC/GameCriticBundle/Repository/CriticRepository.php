<?php

namespace OC\GameCriticBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;
use OC\GameCriticBundle\Entity\Game;

/**
 * CriticRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CriticRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Get latest critics
     * 
     * @param int $page
     * @param int $limit
     * @return array
     */
    public function getLatestCritics($page, $nbPerPage)
    {
        if ($page < 1) {
            throw new \Exception('Invalid page parameter');
        } elseif ($nbPerPage < 1) {
            throw new \Exception('Invalid nbPerPage parameter');
        }
        
        $query = $this->_em->createQuery('
SELECT c 
FROM OCGameCriticBundle:Critic c 
ORDER BY c.creationDate DESC
');
        $query->setFirstResult(($page - 1) * $nbPerPage);
        $query->setMaxResults($nbPerPage);

        return new Paginator($query, true);
    }

    /**
     * Get total critics
     *
     * @return int
     */
    public function getTotalCritics()
    {
        $query = $this->_em->createQuery('
SELECT COUNT(c) 
FROM OCGameCriticBundle:Critic c 
');

        return (int) $query->getSingleScalarResult();
    }
    
    /**
     * Get latest critics by game
     * 
     * @param Game $game
     * @param int $page
     * @param int $limit
     * @return array
     */
    public function getLatestCriticsByGame($game, $page, $nbPerPage)
    {
        if ($page < 1) {
            throw new \Exception('Invalid page parameter');
        } elseif ($nbPerPage < 1) {
            throw new \Exception('Invalid nbPerPage parameter');
        }
        
        $query = $this->_em->createQuery('
SELECT c 
FROM OCGameCriticBundle:Critic c 
WHERE c.game = :game 
ORDER BY c.creationDate DESC
');
        $query->setParameter('game', $game);
        $query->setFirstResult(($page - 1) * $nbPerPage);
        $query->setMaxResults($nbPerPage);

        return new Paginator($query, true);
    }

    /**
     * Get total critics by game
     *
     * @param Game $game
     * @return int
     */
    public function getTotalCriticsByGame(Game $game)
    {
        $query = $this->_em->createQuery('
SELECT COUNT(c) 
FROM OCGameCriticBundle:Critic c 
WHERE c.game = :game
');
        $query->setParameter('game', $game);

        return (int) $query->getSingleScalarResult();
    }

    /**
     * Calculate score
     * 
     * @param Game $game
     * @return string
     */
    public function calulateScore(Game $game)
    {        
        $query = $this->_em->createQuery('
SELECT AVG(c.score) 
FROM OCGameCriticBundle:Critic c 
WHERE c.game = :game
GROUP BY c.game
');
        $query->setParameter('game', $game);
        $score = $query->getSingleScalarResult();

        return $score;
    }
}
